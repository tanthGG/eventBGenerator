machine Refine_Machine_M3
sees Refine_Machine_C3

variables
  pktFwdr
  pktData
  createdPkts
  sentDown
  sentUp
  ctlNeighbours
  recvBuff
  clrRecvBuffFlg
  ndBuff
  destBuff
  emergencyAlert
  ctlSensedFlg
  senseBuff

invariants
  @inv01 pktFwdr ∈ PKT ⇸ ND
  @inv02 pktData ∈ PKT ⇸ ℤ
  @inv03 createdPkts ⊆ PKT
  @inv04 sentUp ∈ ND ↔ PKT
  @inv05 sentDown ∈ ND ↔ PKT
  @inv06 ctlNeighbours ∈ PKT ↔ ND
  @inv07 recvBuff ∈ ND ↔ PKT
  @inv08 clrRecvBuffFlg ∈ ND ↔ PKT
  @inv09 ndBuff ∈ ND ↔ PKT
  @inv10 destBuff ∈ Dests ↔ PKT
  @inv11 emergencyAlert ∈ BOOL
  @inv12 ctlSensedFlg ∈ ND \ Dests → BOOL
  @inv13 senseBuff ∈ ND \ Dests → ℙ(ℤ)

events
  event INITIALISATION
    then
      @int01 pktFwdr ≔ ∅
      @int02 pktData ≔ ∅
      @int03 createdPkts ≔ ∅
      @int04 sentUp ≔ ∅
      @int05 sentDown ≔ ∅
      @int06 ctlNeighbours ≔ ∅
      @int07 recvBuff ≔ ∅
      @int08 clrRecvBuffFlg ≔ ∅
      @int09 ndBuff ≔ ∅
      @int10 destBuff ≔ ∅
      @int11 emergencyAlert ≔ FALSE
      @int12 ctlSensedFlg ≔ (ND \ Dests) × {FALSE}
      @int13 senseBuff ≔ (ND \ Dests) × {∅}
  end

  event creating_Pkt
    any x des pkt data
    where
      @g01 x ∈ ND \ Dests
      @g02 pkt ∈ PKT
      @g03 data ∈ ℤ
      @g04 x = initialSrcAddr(pkt)
      @g05 des = ran({pkt} ◁ finalDestAddr)
      @g06 pkt ∉ dom(pktFwdr)
      @g07 pkt ∉ dom(pktData)
      @g08 x ↦ pkt ∉ ndBuff
    then
      @a01 createdPkts ≔ createdPkts ∪ {pkt}
      @a02 pktFwdr ≔ pktFwdr ∪ {pkt ↦ x}
      @a03 pktData ≔ pktData ∪ {pkt ↦ data}
      @a04 ndBuff ≔ ndBuff ∪ {x ↦ pkt}
  end

  event start_tx
    any x pkt
    where
      @g01 x ∈ ND
      @g02 pkt ∈ PKT
      @g03 x ↦ pkt ∉ sentDown
      @g04 x ↦ pkt ∈ ndBuff
      @g05 pkt ∈ dom(pktFwdr)
    then
      @a01 sentDown ≔ sentDown ∪ {x ↦ pkt}
      @a02 ndBuff ≔ ndBuff \ {x ↦ pkt}
      @a03 pktFwdr ≔ pktFwdr <+ {pkt ↦ x}
  end

  event receive
    any x pkt
    where
      @g01 x ∈ ND
      @g02 pkt ∈ PKT
      @g03 x ↦ pkt ∉ recvBuff
      @g04 x ↦ pkt ∉ sentUp
      @g05 x ↦ pkt ∈ sentDown
      @g06 pkt ↦ x ∈ ctlNeighbours
    then
      @a01 recvBuff ≔ recvBuff ∪ {x ↦ pkt}
      @a02 ctlNeighbours ≔ ctlNeighbours \ {pkt ↦ x}
  end

  event fwdr_receive_pkts
    any x pkt
    where
      @g01 x ∈ ND
      @g02 pkt ∈ PKT
      @g03 x ↦ pkt ∈ recvBuff
      @g04 x ↦ pkt ∉ clrRecvBuffFlg
      @g05 x ∉ Dests
      @g06 x ∈ ND \ Dests
      @g07 x ↦ pkt ∉ ndBuff
    then
      @a01 clrRecvBuffFlg ≔ clrRecvBuffFlg ∪ {x ↦ pkt}
      @a02 ndBuff ≔ ndBuff ∪ {x ↦ pkt}
  end

  event dest_recv_pkts
    any x pkt
    where
      @g01 x ∈ ND
      @g02 pkt ∈ PKT
      @g03 x ↦ pkt ∈ recvBuff
      @g04 x ∈ Dests
      @g05 x ↦ pkt ∉ clrRecvBuffFlg
      @g06 x ↦ pkt ∉ destBuff
    then
      @a01 clrRecvBuffFlg ≔ clrRecvBuffFlg ∪ {x ↦ pkt}
      @a02 destBuff ≔ destBuff ∪ {x ↦ pkt}
  end

  event finish_tx_pkts
    any x pkt
    where
      @g01 x ∈ ND
      @g02 pkt ∈ PKT
      @g03 {pkt} ◁ ctlNeighbours = ∅
      @g04 pkt ∈ ran(sentUp)
      @g05 pkt ∉ ran(sentDown)
      @g06 x ∈ dom(sentUp)
      @g07 x ↦ pkt ∈ sentUp
      @g08 pkt ∈ ran(ndBuff)
    then
      @a01 sentUp ≔ sentUp \ {x ↦ pkt}
  end

  event final_tx_pkts
    any pkt
    where
      @g01 pkt ∈ PKT
      @g02 {pkt} ◁ ctlNeighbours = ∅
      @g03 pkt ∈ ran(sentUp)
      @g04 pkt ∉ ran(sentDown)
      @g05 pkt ∉ ran(ndBuff)
    then
      @a01 sentUp ≔ sentUp ⩥ {pkt}
  end

  event send_down
    any x pkt
    where
      @g01 x ∈ ND
      @g02 pkt ∈ PKT
      @g03 x ↦ pkt ∈ sentDown
  end

  event send_up
    any x pkt nbrs
    where
      @g01 nbrs ∈ ℙ(ND)
      @g02 x ∈ ND
      @g03 pkt ∈ PKT
      @g04 nbrs ∈ ℙ(ND) ∧ nbrs ≠ ∅
      @g05 pkt ∉ dom(ctlNeighbours)
      @g06 x ↦ pkt ∉ sentUp
      @g07 x ↦ pkt ∈ sentDown
    then
      @a01 ctlNeighbours ≔ ctlNeighbours ∪ ({pkt} × nbrs)
      @a02 sentDown ≔ sentDown \ {x ↦ pkt}
      @a03 sentUp ≔ sentUp ∪ {x ↦ pkt}
  end

  event clear_recvdBuff
    any x pkt
    where
      @g01 x ∈ ND
      @g02 pkt ∈ PKT
      @g03 x ↦ pkt ∈ recvBuff
      @g04 x ↦ pkt ∈ clrRecvBuffFlg
    then
      @a01 recvBuff ≔ recvBuff \ {x ↦ pkt}
  end

  event remove_destBuff
    any x pkt
    where
      @g01 x ∈ ND
      @g02 pkt ∈ PKT
      @g03 x ∈ Dests
      @g04 x ↦ pkt ∈ destBuff
    then
      @a01 destBuff ≔ destBuff \ {x ↦ pkt}
  end

  event is_In_Range_destBuff
    any pkt
    where
      @g01 pkt ∈ PKT
      @g02 pkt ∈ ran(destBuff)
  end

  event isNot_In_Range_destBuff
    any pkt
    where
      @g01 pkt ∈ PKT
      @g02 pkt ∉ ran(destBuff)
  end

  event actuating
    any data
    where
      @g01 data ∈ ℤ
      @g02 data ≥ safetyThreshold
      @g03 emergencyAlert = FALSE
    then
      @a01 emergencyAlert ≔ TRUE
  end

  event no_actuating
    any data
    where
      @g01 data ∈ ℤ
      @g02 data < safetyThreshold
  end

  event reset_actuatingStatus
    any data
    where
      @g01 data ∈ ℤ
      @g02 data ≥ safetyThreshold
      @g03 emergencyAlert = TRUE
    then
      @a01 emergencyAlert ≔ FALSE
  end

  event sensing
    any x sf data
    where
      @g01 x ∈ ND \ Dests
      @g02 sf ∈ BOOL
      @g03 data ∈ ℤ
      @g04 x ∈ dom(ctlSensedFlg)
      @g05 ctlSensedFlg(x) = FALSE
    then
      @a01 ctlSensedFlg(x) ≔ sf
      @a02 senseBuff(x) ≔ senseBuff(x) ∪ {data}
  end

  event remove_senseBuff
    any x pkt
    where
      @g01 pkt ∈ ℤ
      @g02 x ∈ ND \ Dests
      @g03 pkt ∈ senseBuff(x)
    then
      @a01 senseBuff(x) ≔ senseBuff(x) \ {pkt}
      @a02 ctlSensedFlg(x) ≔ FALSE
  end

  event reset_sensed_flag
    any x
    where
      @g01 x ∈ ND \ Dests
      @g02 ctlSensedFlg(x) = TRUE
    then
      @a01 ctlSensedFlg(x) ≔ FALSE
  end

  event check_type
    any pkt ty
    where
      @g01 pkt ∈ PKT
      @g02 ty ∈ TYPE
      @g03 type(pkt) = ty
  end

end
